<!DOCTYPE html>
<html lang="" xml:lang="">
  <head>
    <title>R markdown and Quarto Presentation</title>
    <meta charset="utf-8" />
    <meta name="author" content="Yebelay Berehan" />
    <meta name="date" content="2025-02-05" />
    <script src="Introduction-to-R-markdown-and-quarto_files/header-attrs/header-attrs.js"></script>
    <link rel="stylesheet" href="xaringan-themer.css" type="text/css" />
  </head>
  <body>
    <textarea id="source">
class: center, middle, inverse, title-slide

.title[
# R markdown and Quarto Presentation
]
.subtitle[
## using xaringanthemer
]
.author[
### Yebelay Berehan
]
.date[
### 2025-02-05
]

---





## 1. What are R Markdown and Quarto?
- **Brief definition**:
    - R Markdown: A tool to create dynamic documents combining R code and plain text, which can be output as HTML, PDF, or Word. Generate reports, slides, and dashboards.

    - Quarto: The next-generation publishing system that builds on R Markdown, supporting multiple programming languages (R, Python, Julia).

- **Key features**:
   
   - Integration of code and text.
   - Reproducibility in analyses.
   - Various output formats (slides, reports, dashboards).

- **Differences between R Markdown and Quarto**:

   - Quarto is more versatile and not limited to R; it's great for multi-language workflows.

---
# Welcome to R Markdown

- R Markdown provides an authoring framework for data science. You can use a single R Markdown file to both.

  - Create dynamic and reproducible presentations.

  - Combine text, code, and output seamlessly.

  - save and execute code
  
  - generate high quality reports that can be shared with an audience

- R Markdown documents are fully reproducible and support dozens of static and dynamic output formats

---
## Setting Up The Environment

**Prerequisites:**

- Install R and RStudio.

- Installing necessary R packages

- Then Install R markdown

 `install.packages("rmarkdown")`
 
- Quick demonstration: Creating a new R Markdown project in RStudio. 

---
#Get started

**Open RStudio**.

Go to File → New File → R Markdown....

In the dialog box:

Provide a title (e.g., "My R Markdown Presentation").

Choose Presentation.

Select *IOSlides Presentation* or *Slidy Presentation* for HTML slides (both work similarly).

Click **OK**.
---
# An R Markdown file

-  A plain text file that has the extension .Rmd 

**Notice that the file contains three types of content:**

- An (optional) YAML header surrounded by `---s`

- R code chunks surrounded by ` ```s`

- text mixed with simple text formatting

---
# Rendering output

**To generate a report from the file, run the render command:**

`library(rmarkdown)`

`render("1-example.Rmd")`

- Better still, use the “Knit” button in the RStudio IDE to render the file and preview the output with a single click or keyboard shortcut

- R Markdown generates a new file that contains selected text, code, and results from the .Rmd file. The new file can be a finished web page, PDF, MS Word document, slide show, notebook, handout, book, dashboard, package vignette or other format.

---
# How it works
.rmd →  knitr  →  .md → pandoc → output

- When you run render, R Markdown feeds the .Rmd file to knitr, which executes all of the code chunks and creates a new markdown (.md) document which includes the code and its output.

- The markdown file generated by knitr is then processed by pandoc which is responsible for creating the finished format.

- This may sound complicated, but R Markdown makes it extremely simple by encapsulating all of the above processing into a single render function.
---
## Why Use R Markdown for Slide Preparation?

- Reproducible slide creation: Automates updates when data or code changes.

- Customization options: Easy to style slides.

- Integration with code: Showcase data analysis or visualizations in real-time.

- Export formats: HTML (for web), PDF, and PowerPoint.
---
## 4. Basic Syntax for Slide Preparation

- YAML Header:

   - Define metadata for the slides.

`---`

`title: "My R Markdown Presentation"`

`author: "Your Name"`

`date: "2025-02-05"`

`output:` 

  `xaringan::moon_reader:`
  
  `css: xaringan-themer.css`

`---`

---

**Markdown Basics**:
- Markdown provides an easy way to make standard types of formatted
  
- Headings (#, ##, ###).

- Bold: `**text**` → **text**

- Italic: `*text*` → *text*
  
- Lists:
    
    - Item 1
  
    - Item 2

- Code: ` `code` ` →  `code`

- link: `[link](https://r4ds.had.co.nz/r-markdown.html)` → [link](https://r4ds.had.co.nz/r-markdown.html)

---
# Inserting chunk codes

**You can quickly insert chunks like these into your file with**

- the keyboard shortcut Ctrl + Alt + I (OS X: Cmd + Option + I)

- the Add Chunk  command in the editor toolbar

- or by typing the chunk delimiters ` ```{r}` and ` ```.`

When we render the .Rmd file, R Markdown will run each code chunk and embed the results beneath the code chunk in your final report.

---
###Chunk Options

Chunk output can be customized with knitr options, arguments set in the {} of a chunk header. Above, we use five arguments:

- include = FALSE prevents code and results from appearing in the finished file. R Markdown still runs the code in the chunk, and the results can be used by other chunks.

- echo = FALSE prevents code, but not the results from appearing in the finished file. This is a useful way to embed figures.

- message = FALSE prevents messages that are generated by code from appearing in the finished file.

- warning = FALSE prevents warnings that are generated by code from appearing in the finished.

- fig.cap = "..." adds a caption to graphical results.
---
### Global Options

- To set global options that apply to every chunk in your file, call `knitr::opts_chunk$set` in a code chunk. Knitr will treat each option that you pass to `knitr::opts_chunk$set` as a global default that can be overwritten in individual chunk headers.

---
#Inline Code

**Code results can be inserted directly into the text of a .Rmd file by enclosing the code with ` `r `.`** 

The file below uses ` `r ` `  to call colorFunc, which returns “heat.colors.” and "terrain.colors"


``` r
library(viridis)
image(volcano, col = viridis(200, option = "A"))
```

&lt;img src="Introduction-to-R-markdown-and-quarto_files/figure-html/unnamed-chunk-1-1.png" width="100%" /&gt;
---

``` r
colorFunc &lt;- "terrain.colors"
image(volcano, col = get(colorFunc)(200))
```

&lt;img src="Introduction-to-R-markdown-and-quarto_files/figure-html/unnamed-chunk-2-1.png" width="100%" /&gt;

---

``` r
colorFunc &lt;- "heat.colors"
image(volcano, col = get(colorFunc)(200))
```

&lt;img src="Introduction-to-R-markdown-and-quarto_files/figure-html/unnamed-chunk-3-1.png" width="100%" /&gt;

---
# code languages
**knitr can execute code in many languages besides R. Some of the available language engines include:**

- Python
- SQL
- Bash
- Rcpp
- Stan
- JavaScript
- CSS

**To process a code chunk using an alternate language engine, replace the r at the start of your chunk declaration with the name of the language**:

---
# Tables
By default, R Markdown displays data frames and matrixes as they would be in the R terminal (in a 

monospaced font). If you prefer that data be displayed with additional formatting you can use the 

`knitr::kable` function, as in the .Rmd file below.

several packages support making beautiful table with R. Such as

[xtable](https://cran.r-project.org/web/packages/xtable/)


[stargazer](https://cran.r-project.org/web/packages/stargazer/)


[pander](https://cran.r-project.org/web/packages/pander/)

[tables](https://cran.r-project.org/web/packages/tables/)

[ascii](https://cran.r-project.org/web/packages/ascii/)
---

Table: A knitr kable.

|                  |  mpg| cyl| disp|  hp| drat|    wt|  qsec| vs| am| gear| carb|
|:-----------------|----:|---:|----:|---:|----:|-----:|-----:|--:|--:|----:|----:|
|Mazda RX4         | 21.0|   6|  160| 110| 3.90| 2.620| 16.46|  0|  1|    4|    4|
|Mazda RX4 Wag     | 21.0|   6|  160| 110| 3.90| 2.875| 17.02|  0|  1|    4|    4|
|Datsun 710        | 22.8|   4|  108|  93| 3.85| 2.320| 18.61|  1|  1|    4|    1|
|Hornet 4 Drive    | 21.4|   6|  258| 110| 3.08| 3.215| 19.44|  1|  0|    3|    1|
|Hornet Sportabout | 18.7|   8|  360| 175| 3.15| 3.440| 17.02|  0|  0|    3|    2|

**Note the use of the results='asis' chunk option. This is required to ensure that the raw table output isn’t processed further by knitr.**
---

class: center, middle

# Thanks!

Slides created via the R packages:

[**xaringan**](https://github.com/yihui/xaringan)&lt;br&gt;
[gadenbuie/xaringanthemer](https://github.com/gadenbuie/xaringanthemer)

The chakra comes from [remark.js](https://remarkjs.com), [**knitr**](http://yihui.name/knitr), and [R Markdown](https://rmarkdown.rstudio.com).
    </textarea>
<style data-target="print-only">@media screen {.remark-slide-container{display:block;}.remark-slide-scaler{box-shadow:none;}}</style>
<script src="https://remarkjs.com/downloads/remark-latest.min.js"></script>
<script>var slideshow = remark.create({
"slideNumberFormat": "%current%",
"highlightStyle": "github",
"highlightLines": true,
"ratio": "16:9",
"countIncrementalSlides": true
});
if (window.HTMLWidgets) slideshow.on('afterShowSlide', function (slide) {
  window.dispatchEvent(new Event('resize'));
});
(function(d) {
  var s = d.createElement("style"), r = d.querySelector(".remark-slide-scaler");
  if (!r) return;
  s.type = "text/css"; s.innerHTML = "@page {size: " + r.style.width + " " + r.style.height +"; }";
  d.head.appendChild(s);
})(document);

(function(d) {
  var el = d.getElementsByClassName("remark-slides-area");
  if (!el) return;
  var slide, slides = slideshow.getSlides(), els = el[0].children;
  for (var i = 1; i < slides.length; i++) {
    slide = slides[i];
    if (slide.properties.continued === "true" || slide.properties.count === "false") {
      els[i - 1].className += ' has-continuation';
    }
  }
  var s = d.createElement("style");
  s.type = "text/css"; s.innerHTML = "@media print { .has-continuation { display: none; } }";
  d.head.appendChild(s);
})(document);
// delete the temporary CSS (for displaying all slides initially) when the user
// starts to view slides
(function() {
  var deleted = false;
  slideshow.on('beforeShowSlide', function(slide) {
    if (deleted) return;
    var sheets = document.styleSheets, node;
    for (var i = 0; i < sheets.length; i++) {
      node = sheets[i].ownerNode;
      if (node.dataset["target"] !== "print-only") continue;
      node.parentNode.removeChild(node);
    }
    deleted = true;
  });
})();
// add `data-at-shortcutkeys` attribute to <body> to resolve conflicts with JAWS
// screen reader (see PR #262)
(function(d) {
  let res = {};
  d.querySelectorAll('.remark-help-content table tr').forEach(tr => {
    const t = tr.querySelector('td:nth-child(2)').innerText;
    tr.querySelectorAll('td:first-child .key').forEach(key => {
      const k = key.innerText;
      if (/^[a-z]$/.test(k)) res[k] = t;  // must be a single letter (key)
    });
  });
  d.body.setAttribute('data-at-shortcutkeys', JSON.stringify(res));
})(document);
(function() {
  "use strict"
  // Replace <script> tags in slides area to make them executable
  var scripts = document.querySelectorAll(
    '.remark-slides-area .remark-slide-container script'
  );
  if (!scripts.length) return;
  for (var i = 0; i < scripts.length; i++) {
    var s = document.createElement('script');
    var code = document.createTextNode(scripts[i].textContent);
    s.appendChild(code);
    var scriptAttrs = scripts[i].attributes;
    for (var j = 0; j < scriptAttrs.length; j++) {
      s.setAttribute(scriptAttrs[j].name, scriptAttrs[j].value);
    }
    scripts[i].parentElement.replaceChild(s, scripts[i]);
  }
})();
(function() {
  var links = document.getElementsByTagName('a');
  for (var i = 0; i < links.length; i++) {
    if (/^(https?:)?\/\//.test(links[i].getAttribute('href'))) {
      links[i].target = '_blank';
    }
  }
})();
// adds .remark-code-has-line-highlighted class to <pre> parent elements
// of code chunks containing highlighted lines with class .remark-code-line-highlighted
(function(d) {
  const hlines = d.querySelectorAll('.remark-code-line-highlighted');
  const preParents = [];
  const findPreParent = function(line, p = 0) {
    if (p > 1) return null; // traverse up no further than grandparent
    const el = line.parentElement;
    return el.tagName === "PRE" ? el : findPreParent(el, ++p);
  };

  for (let line of hlines) {
    let pre = findPreParent(line);
    if (pre && !preParents.includes(pre)) preParents.push(pre);
  }
  preParents.forEach(p => p.classList.add("remark-code-has-line-highlighted"));
})(document);</script>

<script>
slideshow._releaseMath = function(el) {
  var i, text, code, codes = el.getElementsByTagName('code');
  for (i = 0; i < codes.length;) {
    code = codes[i];
    if (code.parentNode.tagName !== 'PRE' && code.childElementCount === 0) {
      text = code.textContent;
      if (/^\\\((.|\s)+\\\)$/.test(text) || /^\\\[(.|\s)+\\\]$/.test(text) ||
          /^\$\$(.|\s)+\$\$$/.test(text) ||
          /^\\begin\{([^}]+)\}(.|\s)+\\end\{[^}]+\}$/.test(text)) {
        code.outerHTML = code.innerHTML;  // remove <code></code>
        continue;
      }
    }
    i++;
  }
};
slideshow._releaseMath(document);
</script>
<!-- dynamically load mathjax for compatibility with self-contained -->
<script>
(function () {
  var script = document.createElement('script');
  script.type = 'text/javascript';
  script.src  = 'https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-MML-AM_CHTML';
  if (location.protocol !== 'file:' && /^https?:/.test(script.src))
    script.src  = script.src.replace(/^https?:/, '');
  document.getElementsByTagName('head')[0].appendChild(script);
})();
</script>
  </body>
</html>
