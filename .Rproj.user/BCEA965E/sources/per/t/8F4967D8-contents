---
title: " R markdown and Quarto Presentation"
subtitle: "using xaringanthemer"  
author: 
  - "Yebelay Berehan"
date: '`r Sys.Date()`'
output:
  xaringan::moon_reader:
    css: xaringan-themer.css
    nature:
      slideNumberFormat: "%current%"
      highlightStyle: github
      highlightLines: true
      ratio: 16:9
      countIncrementalSlides: true
---

```{r setup, include=FALSE}
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
  fig.width=9, fig.height=3.5, fig.retina=3,
  out.width = "100%",
  cache = FALSE,
  echo = TRUE,
  message = FALSE, 
  warning = FALSE,
  hiline = TRUE
)
```

```{r xaringan-themer, include=FALSE, warning=FALSE}
library(xaringanthemer)
style_duo_accent(
  primary_color = "#1381B0",
  secondary_color = "#FF961C",
  inverse_header_color = "#FFFFFF"
)
```
## 1. What are R Markdown and Quarto?
- **Brief definition**:
    - R Markdown: A tool to create dynamic documents combining R code and plain text, which can be output as HTML, PDF, or Word. Generate reports, slides, and dashboards.

    - Quarto: The next-generation publishing system that builds on R Markdown, supporting multiple programming languages (R, Python, Julia).

- **Key features**:
   
   - Integration of code and text.
   - Reproducibility in analyses.
   - Various output formats (slides, reports, dashboards).

- **Differences between R Markdown and Quarto**:

   - Quarto is more versatile and not limited to R; it's great for multi-language workflows.

---
# Welcome to R Markdown

- R Markdown provides an authoring framework for data science. You can use a single R Markdown file to both.

  - Create dynamic and reproducible presentations.

  - Combine text, code, and output seamlessly.

  - save and execute code
  
  - generate high quality reports that can be shared with an audience

- R Markdown documents are fully reproducible and support dozens of static and dynamic output formats

---
## Setting Up The Environment

**Prerequisites:**

- Install R and RStudio.

- Installing necessary R packages

- Then Install R markdown

 `install.packages("rmarkdown")`
 
- Quick demonstration: Creating a new R Markdown project in RStudio. 

---
#Get started

**Open RStudio**.

Go to File → New File → R Markdown....

In the dialog box:

Provide a title (e.g., "My R Markdown Presentation").

Choose Presentation.

Select *IOSlides Presentation* or *Slidy Presentation* for HTML slides (both work similarly).

Click **OK**.
---
# An R Markdown file

-  A plain text file that has the extension .Rmd 

**Notice that the file contains three types of content:**

- An (optional) YAML header surrounded by `---s`

- R code chunks surrounded by ` ```s`

- text mixed with simple text formatting

---
# Rendering output

**To generate a report from the file, run the render command:**

`library(rmarkdown)`

`render("1-example.Rmd")`

- Better still, use the “Knit” button in the RStudio IDE to render the file and preview the output with a single click or keyboard shortcut

- R Markdown generates a new file that contains selected text, code, and results from the .Rmd file. The new file can be a finished web page, PDF, MS Word document, slide show, notebook, handout, book, dashboard, package vignette or other format.

---
# How it works
.rmd →  knitr  →  .md → pandoc → output

- When you run render, R Markdown feeds the .Rmd file to knitr, which executes all of the code chunks and creates a new markdown (.md) document which includes the code and its output.

- The markdown file generated by knitr is then processed by pandoc which is responsible for creating the finished format.

- This may sound complicated, but R Markdown makes it extremely simple by encapsulating all of the above processing into a single render function.
---
## Why Use R Markdown for Slide Preparation?

- Reproducible slide creation: Automates updates when data or code changes.

- Customization options: Easy to style slides.

- Integration with code: Showcase data analysis or visualizations in real-time.

- Export formats: HTML (for web), PDF, and PowerPoint.
---
## 4. Basic Syntax for Slide Preparation

- YAML Header:

   - Define metadata for the slides.

`---`

`title: "My R Markdown Presentation"`

`author: "Your Name"`

`date: "`r Sys.Date()`"`

`output:` 

  `xaringan::moon_reader:`
  
  `css: xaringan-themer.css`

`---`

---

**Markdown Basics**:
- Markdown provides an easy way to make standard types of formatted
  
- Headings (#, ##, ###).

- Bold: `**text**` → **text**

- Italic: `*text*` → *text*
  
- Lists:
    
    - Item 1
  
    - Item 2

- Code: ` `code` ` →  `code`

- link: `[link](https://r4ds.had.co.nz/r-markdown.html)` → [link](https://r4ds.had.co.nz/r-markdown.html)

---
# Inserting chunk codes

**You can quickly insert chunks like these into your file with**

- the keyboard shortcut Ctrl + Alt + I (OS X: Cmd + Option + I)

- the Add Chunk  command in the editor toolbar

- or by typing the chunk delimiters ` ```{r}` and ` ```.`

When we render the .Rmd file, R Markdown will run each code chunk and embed the results beneath the code chunk in your final report.

---
###Chunk Options

Chunk output can be customized with knitr options, arguments set in the {} of a chunk header. Above, we use five arguments:

- include = FALSE prevents code and results from appearing in the finished file. R Markdown still runs the code in the chunk, and the results can be used by other chunks.

- echo = FALSE prevents code, but not the results from appearing in the finished file. This is a useful way to embed figures.

- message = FALSE prevents messages that are generated by code from appearing in the finished file.

- warning = FALSE prevents warnings that are generated by code from appearing in the finished.

- fig.cap = "..." adds a caption to graphical results.
---
### Global Options

- To set global options that apply to every chunk in your file, call `knitr::opts_chunk$set` in a code chunk. Knitr will treat each option that you pass to `knitr::opts_chunk$set` as a global default that can be overwritten in individual chunk headers.

---
#Inline Code

**Code results can be inserted directly into the text of a .Rmd file by enclosing the code with ` `r `.`** 

The file below uses ` `r ` `  to call colorFunc, which returns “heat.colors.” and "terrain.colors"

```{r}
library(viridis)
image(volcano, col = viridis(200, option = "A"))
```
---
```{r}
colorFunc <- "terrain.colors"
image(volcano, col = get(colorFunc)(200))
```

---
```{r}
colorFunc <- "heat.colors"
image(volcano, col = get(colorFunc)(200))
```

---
# code languages
**knitr can execute code in many languages besides R. Some of the available language engines include:**

- Python
- SQL
- Bash
- Rcpp
- Stan
- JavaScript
- CSS

**To process a code chunk using an alternate language engine, replace the r at the start of your chunk declaration with the name of the language**:

---
# Tables
By default, R Markdown displays data frames and matrixes as they would be in the R terminal (in a 

monospaced font). If you prefer that data be displayed with additional formatting you can use the 

`knitr::kable` function, as in the .Rmd file below.

several packages support making beautiful table with R. Such as

[xtable](https://cran.r-project.org/web/packages/xtable/)


[stargazer](https://cran.r-project.org/web/packages/stargazer/)


[pander](https://cran.r-project.org/web/packages/pander/)

[tables](https://cran.r-project.org/web/packages/tables/)

[ascii](https://cran.r-project.org/web/packages/ascii/)
---
```{r echo=FALSE,results='asis'}
library(knitr)
kable(mtcars[1:5,],caption = "A knitr kable.")
```

**Note the use of the results='asis' chunk option. This is required to ensure that the raw table output isn’t processed further by knitr.**
---

class: center, middle

# Thanks!

Slides created via the R packages:

[**xaringan**](https://github.com/yihui/xaringan)<br>
[gadenbuie/xaringanthemer](https://github.com/gadenbuie/xaringanthemer)

The chakra comes from [remark.js](https://remarkjs.com), [**knitr**](http://yihui.name/knitr), and [R Markdown](https://rmarkdown.rstudio.com).